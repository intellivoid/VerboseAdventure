<?php

    namespace VerboseAdventure\Abstracts;

    abstract class BuiltinErrorLevels
    {
        /**
         * Fatal run-time errors. These indicate errors that can not be recovered from,
         * such as a memory allocation problem. Execution of the script is halted.
         */
        const E_ERROR = 1;

        /**
         * Run-time warnings (non-fatal errors). Execution of the script is not halted.
         */
        const E_WARNING = 2;

        /**
         * Compile-time parse errors. Parse errors should only be generated by the parser.
         */
        const E_PARSE  = 4;

        /**
         * Run-time notices. Indicate that the script encountered something that could indicate an error,
         * but could also happen in the normal course of running a script.
         */
        const E_NOTICE = 8;

        /**
         * Fatal errors that occur during PHP's initial startup. This is like an E_ERROR, except it
         * is generated by the core of PHP.
         */
        const E_CORE_ERROR = 16;

        /**
         * Warnings (non-fatal errors) that occur during PHP's initial startup. This is like an E_WARNING,
         * except it is generated by the core of PHP.
         */
        const E_CORE_WARNING = 32;

        /**
         * Fatal compile-time errors. This is like an E_ERROR, except it is generated by the Zend Scripting Engine.
         */
        const E_COMPILE_ERROR = 64;

        /**
         * Compile-time warnings (non-fatal errors). This is like an E_WARNING, except it is
         * generated by the Zend Scripting Engine.
         */
        const E_COMPILE_WARNING = 128;

        /**
         * User-generated error message. This is like an E_ERROR, except it is generated in PHP code by using the
         * PHP function trigger_error().
         */
        const E_USER_ERROR = 256;

        /**
         * User-generated warning message. This is like an E_WARNING, except it is generated in PHP code by
         * using the PHP function trigger_error().
         */
        const E_USER_WARNING = 512;

        /**
         * User-generated notice message. This is like an E_NOTICE, except it is generated in PHP code by using
         * the PHP function trigger_error().
         */
        const E_USER_NOTICE = 1024;

        /**
         * Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward
         * compatibility of your code.
         */
        const E_STRICT = 2048;

        /**
         * Catchable fatal error. It indicates that a probably dangerous error occurred, but did not leave the Engine
         * in an unstable state. If the error is not caught by a user defined handle (see also set_error_handler()),
         * the application aborts as it was an E_ERROR.
         */
        const E_RECOVERABLE_ERROR = 4096;

        /**
         * Run-time notices. Enable this to receive warnings about code that will not work in future versions.
         */
        const E_DEPRECATED = 8192;

        /**
         * User-generated warning message. This is like an E_DEPRECATED, except it is generated in PHP code by
         * using the PHP function trigger_error().
         */
        const E_USER_DEPRECATED = 16384;

        /**
         * All errors, warnings, and notices.
         */
        const E_ALL = 32767;
    }